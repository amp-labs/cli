openapi: 3.0.1
info:
  title: problem types
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: []
paths: {}
components:
  responses:
    ProblemResponse:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
      description: a problem
    InputValidationProblemResponse:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/InputValidationProblem"
      description: A problem caused by invalid input
  schemas:
    Problem:
      description: |
        A Problem Details object (RFC 9457).

        Additional properties specific to the problem type may be present.
      type: object
      properties:
        type:
          type: string
          format: uri
          description: An absolute URI that identifies the problem type
          default: about:blank
        href:
          type: string
          format: uri
          description: An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
        title:
          type: string
          description: A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
      example:
        type: urn:problem-type:exampleOrganization:exampleProblem # "exampleOrganization" should be a short identifier for the organization that defines the problem type. "belgif" is used for problem types standardized in the Belgif REST guide
        href: "https://www.belgif.be/specification/rest/api-guide/#standardized-problem-types" # optional, should refer to documentation of the problem type, either of a belgif standardized or a custom problem type
        title: Description of the type of problem that occurred
        status: 400 # HTTP response status, appropriate for the problem type
        detail: Description of specific occurrence of the problem
        instance: urn:uuid:123e4567-e89b-12d3-a456-426614174000
    ApiProblem:
      type: object
      allOf:
        - $ref: "#/components/schemas/Problem"
      properties:
        subsystem:
          type: string
          description: The subsystem that generated the problem
          example: "api"
        time:
          type: string
          format: date-time
          description: The time the problem occurred, formatted as RFC-3339
          example: "2024-04-22T18:55:28.456076Z"
        requestId:
          type: string
          description: A unique identifier for the request, useful for debugging
          example: "89eb1ffb-2a54-4105-aaae-7bf990f1aa69#87715"
        causes:
          type: array
          items:
            type: string
            description: A brief description of something which caused the problem
            example: "database connection failed"
          example:
            - "database connection failed"
            - "database query failed"
            - "unable to fetch user"
          description: |
            A list of problems that caused this problem. This can be used to represent multiple
            root causes. There is no guaranteed ordering of the causes.
        remedy:
          type: string
          description: A brief description of how to resolve the problem
          example: "Shorten your input to be under 100 characters"
        supportEmail:
          type: string
          format: email
          description: An email address to contact for support
          example: "support@withampersand.com"
        supportPhone:
          type: string
          description: A phone number to contact for support
          example: "+1-555-555-5555"
        supportUrl:
          type: string
          format: uri
          description: A URL to contact for support
          example: "https://withampersand.com/support"
        retryable:
          type: boolean
          description: Whether the request can be retried
          example: false
        retryAfter:
          type: string
          format: date-time
          description: A timestamp after which the request can be retried, formatted as RFC-3339
          example: "2024-04-22T18:55:28.456076Z"
        context:
          type: object
          description: Additional context for the problem
          additionalProperties: true
          example:
            name: "Rick Sanchez"
    InputValidationProblem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiProblem"
      properties:
        issues:
          type: array
          items:
            $ref: "#/components/schemas/InputValidationIssue"
      example:
        type: about:blank
        title: Bad Request
        status: 400
        detail:  "The input message is incorrect"
        instance: 123456-1234-1235-4567489798
        issues:
          - type: about:blank
            detail: exampleNumericProperty should be numeric # detail is optional
            in: path
            name: exampleNumericProperty
            value: abc
          - type: about:blank
            title: "Input isn't valid with respect to schema"
            detail: "examplePropertyWithPattern a2345678901 doesn't match pattern '^\\d{11}$'"
            in: body
            name: items[0].examplePropertyWithPattern # location within the body
            value: "a2345678901"
    InputValidationIssue:
      type: object
      description: |
        An issue detected during input validation.
      allOf:
        - $ref: "#/components/schemas/ApiProblem"
      properties:
        in:
          type: string
          description: The location of the invalid input
          enum:
            - body
            - header
            - path
            - query
        name:
          type: string
          description: The name of the invalid input
        value:
          description: The value of the erroneous input
          # no type specified, allowing any type. This is valid in OpenAPI even though some editors may indicate an error
